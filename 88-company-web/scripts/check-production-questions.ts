import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://tjizerpeyteokqhufqea.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRqaXplcnBleXRlb2txaHVmcWVhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc2ODkxMTEsImV4cCI6MjA3MzI2NTExMX0.lpw_F9T7tML76NyCm1_6NJ6kyFdXtYsoUehK9ZhZT7s';

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function checkProductionQuestions() {
  console.log('üîç Checking production database questions...\n');

  try {
    const { data: allQuestions, error } = await supabase
      .from('chat_questions')
      .select('order_index, type, question')
      .order('order_index', { ascending: true });

    if (error) {
      console.error('‚ùå Failed to fetch questions:', error);
      process.exit(1);
    }

    console.log('üìä Total questions in database:', allQuestions?.length || 0);
    console.log('\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
    console.log('‚îÇ Order Index ‚îÇ Type         ‚îÇ Question Preview          ‚îÇ');
    console.log('‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§');

    allQuestions?.forEach((q) => {
      const orderStr = String(q.order_index).padEnd(11);
      const typeStr = String(q.type || '-').padEnd(12);
      const questionPreview = (q.question || '').substring(0, 25).padEnd(26);
      console.log(`‚îÇ ${orderStr} ‚îÇ ${typeStr} ‚îÇ ${questionPreview} ‚îÇ`);
    });

    console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n');

    const welcomeMsg = allQuestions?.find(q => q.order_index === 0);
    const regularQuestions = allQuestions?.filter(q => q.order_index !== 999 && q.order_index !== 0);
    const completeMsg = allQuestions?.find(q => q.order_index === 999);

    console.log('üìã Question breakdown:');
    console.log(`  - Welcome message (0): ${welcomeMsg ? '‚úì' : '‚úó'}`);
    console.log(`  - Regular questions (1-N): ${regularQuestions?.length || 0}`);
    console.log(`  - Complete message (999): ${completeMsg ? '‚úì' : '‚úó'}`);
    console.log(`  - Total steps (excluding 0 and 999): ${regularQuestions?.length || 0}`);

    console.log('\nüéØ Expected flow:');
    console.log('  1. Welcome message (order_index=0) - NO INPUT REQUIRED');
    console.log('  2. First question (order_index=1) - INPUT REQUIRED');
    console.log('  3. Progress: 0/10 ‚Üí 1/10 ‚Üí ... ‚Üí 10/10');

    if (welcomeMsg) {
      console.log('\n‚úÖ Welcome message found:');
      console.log('  Type:', welcomeMsg.type);
      console.log('  Content:', welcomeMsg.question.substring(0, 100) + '...');
    } else {
      console.log('\n‚ùå Welcome message NOT found!');
      console.log('  Run: npx tsx scripts/add-welcome-final.ts');
    }

    if (regularQuestions && regularQuestions.length > 0) {
      console.log('\n‚úÖ First question found:');
      const firstQ = regularQuestions[0];
      console.log('  Order index:', firstQ.order_index);
      console.log('  Type:', firstQ.type);
      console.log('  Content:', firstQ.question.substring(0, 100) + '...');
    }

    console.log('\nüí° Debug checklist:');
    console.log('  [ ] Welcome message exists (order_index=0)');
    console.log('  [ ] First question exists (order_index=1)');
    console.log('  [ ] Total regular questions = 10');
    console.log('  [ ] No duplicate order_index values');
    console.log('  [ ] All question types are valid');

  } catch (error) {
    console.error('‚ùå Unexpected error:', error);
    process.exit(1);
  }
}

checkProductionQuestions();
